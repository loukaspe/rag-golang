// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/core/services/chatSessionService.go
//
// Generated by this command:
//
//	mockgen -source=../internal/core/services/chatSessionService.go -destination=../mocks/mock_internal/core/services/chatSessionService.go
//

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	domain "github.com/loukaspe/rag-golang/internal/core/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockChatSessionServiceInterface is a mock of ChatSessionServiceInterface interface.
type MockChatSessionServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockChatSessionServiceInterfaceMockRecorder
}

// MockChatSessionServiceInterfaceMockRecorder is the mock recorder for MockChatSessionServiceInterface.
type MockChatSessionServiceInterfaceMockRecorder struct {
	mock *MockChatSessionServiceInterface
}

// NewMockChatSessionServiceInterface creates a new mock instance.
func NewMockChatSessionServiceInterface(ctrl *gomock.Controller) *MockChatSessionServiceInterface {
	mock := &MockChatSessionServiceInterface{ctrl: ctrl}
	mock.recorder = &MockChatSessionServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatSessionServiceInterface) EXPECT() *MockChatSessionServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateChatSession mocks base method.
func (m *MockChatSessionServiceInterface) CreateChatSession(arg0 context.Context, arg1 *domain.ChatSession) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatSession", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChatSession indicates an expected call of CreateChatSession.
func (mr *MockChatSessionServiceInterfaceMockRecorder) CreateChatSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatSession", reflect.TypeOf((*MockChatSessionServiceInterface)(nil).CreateChatSession), arg0, arg1)
}

// GetChatSession mocks base method.
func (m *MockChatSessionServiceInterface) GetChatSession(arg0 context.Context, arg1 uuid.UUID) (*domain.ChatSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChatSession", arg0, arg1)
	ret0, _ := ret[0].(*domain.ChatSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatSession indicates an expected call of GetChatSession.
func (mr *MockChatSessionServiceInterfaceMockRecorder) GetChatSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatSession", reflect.TypeOf((*MockChatSessionServiceInterface)(nil).GetChatSession), arg0, arg1)
}

// GetUserChatSessions mocks base method.
func (m *MockChatSessionServiceInterface) GetUserChatSessions(arg0 context.Context, arg1 uuid.UUID) ([]*domain.ChatSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserChatSessions", arg0, arg1)
	ret0, _ := ret[0].([]*domain.ChatSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChatSessions indicates an expected call of GetUserChatSessions.
func (mr *MockChatSessionServiceInterfaceMockRecorder) GetUserChatSessions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChatSessions", reflect.TypeOf((*MockChatSessionServiceInterface)(nil).GetUserChatSessions), arg0, arg1)
}

// UpdateChatSessionTitle mocks base method.
func (m *MockChatSessionServiceInterface) UpdateChatSessionTitle(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChatSessionTitle", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChatSessionTitle indicates an expected call of UpdateChatSessionTitle.
func (mr *MockChatSessionServiceInterfaceMockRecorder) UpdateChatSessionTitle(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChatSessionTitle", reflect.TypeOf((*MockChatSessionServiceInterface)(nil).UpdateChatSessionTitle), arg0, arg1, arg2)
}
